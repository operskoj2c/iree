# Copyright 2019 The IREE Authors
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

package(
    default_visibility = ["//visibility:public"],
    features = ["layering_check"],
    licenses = ["notice"],  # Apache 2.0
)

cc_library(
    name = "SPIRV",
    srcs = [
        "AdrenoConfig.cpp",
        "ConvertToSPIRVPass.cpp",
        "KernelConfig.cpp",
        "MaliConfig.cpp",
        "NVIDIAConfig.cpp",
        "Passes.cpp",
        "SPIRVCreateFastSlowPath.cpp",
        "SPIRVDistribute.cpp",
        "SPIRVFuseTensorPadWithConsumer.cpp",
        "SPIRVLowerExecutableTargetPass.cpp",
        "SPIRVTile.cpp",
        "SPIRVTileAndDistribute.cpp",
        "SPIRVTileAndVectorizeToCooperativeOps.cpp",
        "SPIRVVectorToCooperativeOps.cpp",
        "SPIRVVectorize.cpp",
        "SPIRVVectorizeLoadStore.cpp",
        "SPIRVVectorizePad.cpp",
        "Utils.cpp",
    ],
    hdrs = [
        "KernelConfig.h",
        "MemorySpace.h",
        "Utils.h",
    ],
    deps = [
        "//iree/compiler/Codegen:PassHeaders",
        "//iree/compiler/Codegen/Common",
        "//iree/compiler/Codegen/Dialect:IREECodegenDialect",
        "//iree/compiler/Codegen/Transforms",
        "//iree/compiler/Codegen/Utils",
        "//iree/compiler/Dialect/Flow/IR",
        "//iree/compiler/Dialect/HAL/IR",
        "//iree/compiler/Dialect/HAL/IR:HALDialect",
        "//iree/compiler/Dialect/Util/IR",
        "//llvm-external-projects/iree-dialects:IREELinalgExtDialect",
        "//llvm-external-projects/iree-dialects:IREELinalgExtPasses",
        "@llvm-project//llvm:Support",
        "@llvm-project//mlir:Affine",
        "@llvm-project//mlir:AffineAnalysis",
        "@llvm-project//mlir:AffineToStandardTransforms",
        "@llvm-project//mlir:AffineUtils",
        "@llvm-project//mlir:Analysis",
        "@llvm-project//mlir:ArithmeticDialect",
        "@llvm-project//mlir:ArithmeticToSPIRV",
        "@llvm-project//mlir:ArithmeticTransforms",
        "@llvm-project//mlir:ArithmeticUtils",
        "@llvm-project//mlir:BufferizationDialect",
        "@llvm-project//mlir:ControlFlowToSPIRV",
        "@llvm-project//mlir:DialectUtils",
        "@llvm-project//mlir:FuncDialect",
        "@llvm-project//mlir:FuncToSPIRV",
        "@llvm-project//mlir:FuncTransforms",
        "@llvm-project//mlir:GPUDialect",
        "@llvm-project//mlir:GPUToSPIRV",
        "@llvm-project//mlir:GPUTransforms",
        "@llvm-project//mlir:IR",
        "@llvm-project//mlir:LinalgOps",
        "@llvm-project//mlir:LinalgTransforms",
        "@llvm-project//mlir:MathToSPIRV",
        "@llvm-project//mlir:MemRefDialect",
        "@llvm-project//mlir:MemRefToSPIRV",
        "@llvm-project//mlir:MemRefTransforms",
        "@llvm-project//mlir:Pass",
        "@llvm-project//mlir:SCFDialect",
        "@llvm-project//mlir:SCFToGPUPass",
        "@llvm-project//mlir:SCFToSPIRV",
        "@llvm-project//mlir:SCFTransforms",
        "@llvm-project//mlir:SCFUtils",
        "@llvm-project//mlir:SPIRVConversion",
        "@llvm-project//mlir:SPIRVDialect",
        "@llvm-project//mlir:SPIRVTransforms",
        "@llvm-project//mlir:SideEffectInterfaces",
        "@llvm-project//mlir:Support",
        "@llvm-project//mlir:TensorDialect",
        "@llvm-project//mlir:TensorToSPIRV",
        "@llvm-project//mlir:TensorTransforms",
        "@llvm-project//mlir:TosaDialect",
        "@llvm-project//mlir:TosaToArith",
        "@llvm-project//mlir:Transforms",
        "@llvm-project//mlir:VectorInterfaces",
        "@llvm-project//mlir:VectorOps",
        "@llvm-project//mlir:VectorToSPIRV",
        "@llvm-project//mlir:VectorTransforms",
    ],
)
