// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace iree;

// 'Metal Executable'.
file_identifier "MTLE";
file_extension "mtle";

// A struct for Metal threadgroup size along each dimension.
struct MetalThreadgroupSize {
  x:uint32;
  y:uint32;
  z:uint32;
}

// A Metal shader library and runtime pipeline state description.
// This information is used to create MTLLibrary, MTLFunction and pipeline
// state objects.
table MetalExecutableDef {
  // Reserved implementation-specific value that can be passed from compiler
  // to runtime.
  tag:string;

  // A map of entry point ordinals to string names as used in the shader
  // library.
  entry_points:[string];

  // Threadgroup sizes for each entry point.
  //
  // We need this because workgroup size is directly baked inside SPIR-V code,
  // but in Metal it's specified when dispatching workload. So when cross
  // compiling SPIR-V to MSL, we need to persist the information here so that
  // later it can be used for dispatching.
  // TODO(antiagainst): support SPIR-V specialization constant.
  threadgroup_sizes:[MetalThreadgroupSize];

  // Shader content can be provided as either a serialized library or in the
  // form of source code strings.

  // Serialized Metal shader library.
  shader_library:[uint8];
  // Original Metal shader source code.
  shader_sources:[string];
}

root_type MetalExecutableDef;

